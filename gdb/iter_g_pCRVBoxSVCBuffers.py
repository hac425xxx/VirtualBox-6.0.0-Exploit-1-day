import sys
import os
sys.path.append(os.path.dirname(__file__))
# from gdbutils import *

import gdb
import struct

def write_memory(address, buffer, length=0x10):
    return gdb.selected_inferior().write_memory(address, buffer, length)

def get_pid():
    return gdb.selected_inferior().pid

def read_memory(addr, length=0x10):
    return gdb.selected_inferior().read_memory(addr, length).tobytes()

def u32(x: bytes) -> int:
    """Unpack one dword respecting the current architecture endianness."""
    return struct.unpack("<i", x)[0]

def u64(x: bytes) -> int:
    """Unpack one qword respecting the current architecture endianness."""
    return struct.unpack("<q", x)[0]

def read_u64(addr: int) -> int:
    sz = 8
    mem = read_memory(addr, sz)
    unpack = u32 if sz == 4 else u64
    return unpack(mem)

def read_u32(addr: int) -> int:
    sz = 4
    mem = read_memory(addr, sz)
    unpack = u32 if sz == 4 else u64
    return unpack(mem)


def get_chunk_heap(addr):
    return addr & 0xfffffffffc000000

def get_chunk_arena(addr):
    mchunk_size = read_u64(addr + 8)

    if mchunk_size & 0x4:
        return 0x11223344 # for main_arena

    heap = get_chunk_heap(addr)
    arena = read_u64(heap)
    return arena


fp = open("svc_buffer.txt", "w")

g_pCRVBoxSVCBuffers = int(gdb.parse_and_eval("g_pCRVBoxSVCBuffers"))
buffer = g_pCRVBoxSVCBuffers

uniq_arena = set()


while True:
    if buffer == 0:
        break

    uId = read_u32(buffer)
    size = read_u32(buffer + 4)
    data = read_u64(buffer + 8)
    buffer_arena = get_chunk_arena(buffer)
    data_arena = get_chunk_arena(data)

    uniq_arena.add(buffer_arena)
    uniq_arena.add(data_arena)

    pNext = read_u64(buffer + 0x10)
    pPrev = read_u64(buffer + 0x18)
    # print("uId: {}, buffer: 0x{:x}, buffer->data: 0x{:x}, buffer->size: 0x{:x}".format(uId, buffer, data, size))
    fp.write("uId: {}, buffer: 0x{:x}/0x{:x}, buffer->data: 0x{:x}/0x{:x}, buffer->size: 0x{:x}\n".format(uId, buffer, buffer_arena, data, data_arena, size))
    buffer = pNext

fp.close()


print(uniq_arena)

"""
#define heap_for_ptr(ptr) \
  ((heap_info *) ((unsigned long) (ptr) & ~(HEAP_MAX_SIZE - 1)))
#define arena_for_chunk(ptr) \
  (chunk_main_arena (ptr) ? &main_arena : heap_for_ptr (ptr)->ar_ptr)

"""